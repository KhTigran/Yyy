package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import java.io.IOException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import com.mysql.cj.jdbc.MysqlDataSource;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.control.ComboBox;

import javafx.scene.control.TextArea;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class Ocno_adminController implements Initializable{
	@FXML
	private TableView<Zavka> table;
	@FXML
	private TableColumn<Zavka,String> Nomer;
	@FXML
	private TableColumn<Zavka,String> Data_reg;
	@FXML
	private TableColumn<Zavka,String> Data_vip;
	@FXML
	private TableColumn<Zavka,String> Vid_texniki;
	@FXML
	private TableColumn<Zavka,String> Model;
	@FXML
	private TableColumn<Zavka,String> Status;
	@FXML
	private TableColumn<Zavka,String>Opis;
	@FXML
	private TableColumn<Zavka,Integer> Tip_remonta;
	@FXML
	private TableColumn<Zavka,Integer> Master;
	@FXML
	private TableColumn<Zavka,Integer> Polzvtl;
	@FXML
	private TableColumn<Zavka,String> Kommit;
	@FXML
	private TableView<Remont> table2;
	@FXML
	private TableColumn<Remont,String> Status_remont;
	@FXML
	private TableColumn<Remont,String> Nomer_zavki;
	@FXML
	private Label polzvtln;
	@FXML
	private ComboBox<String> status_remont;
	@FXML
	private TextArea area;
	@FXML
	private Button izm;
	@FXML
	private ComboBox<String> cb_master;
	@FXML
	private ComboBox<String> cb1_status;
	@FXML
	private TextArea area1;
	@FXML
	private Label kol_zav_zavok;
	@FXML
	private Label sr_vrema;
	@FXML
	private Label tip3;
	@FXML
	private Label tip2;
	@FXML
	private Label tip1;
	@FXML
	private Button vixod;
    @FXML
    private Button izm1;

    @FXML
    private Button izm2;
	String polzovatel;
	ZavkaDao zavkaDao;
	ObservableList<String> statusValues = FXCollections.observableArrayList("ожидание запчастей","готова к выдаче","в процессе ремонта");
	ObservableList<String> statusValues2 = FXCollections.observableArrayList("в процессе ремонта","завершена");
	MysqlDataSource dataSource;
	JdbcTemplate jb;
	ObservableList<Zavka> zav = FXCollections.observableArrayList();
	ObservableList<Remont> zav2 = FXCollections.observableArrayList();
	RemontDao remontDao;
	
	// Event Listener on Button[#izm].onAction
	@FXML
	public void izm_act(ActionEvent event) {
		// TODO Autogenerated
		jb = new JdbcTemplate(dataSource);
		
		String selected = cb_master.getValue();
		String onlyDigits = selected.replaceAll("\\D", "");
	    int number = Integer.parseInt(onlyDigits);
		
		Zavka us =(Zavka)table.getSelectionModel().getSelectedItem();
		String sql = "update  zavka set Master_ID=? where (Nomer=?) ";
		jb.update(sql, number, us.getNomer());
		zav.clear();
		zav.addAll(zavkaDao.getAll());
	}
	// Event Listener on Button[#vixod].onAction
	@FXML
	public void act_vixod(ActionEvent event) throws IOException {
		// TODO Autogenerated
		Pane root=null;
		root = (Pane)FXMLLoader.load(getClass().getResource("Vxod.fxml"));
		Stage stage = (Stage) vixod.getScene().getWindow();
		stage.setScene(new Scene(root,600,400));
	}
	@FXML
    void izm_act1(ActionEvent event) {
		jb = new JdbcTemplate(dataSource);
		Remont us =(Remont)table2.getSelectionModel().getSelectedItem();
		String sql = "update  remont set Status_remonta=? where (Zavka_Id=?) ";
		jb.update(sql, status_remont.getValue() , us.getNomer_zavki());
		zav2.clear();
		zav2.addAll(remontDao.getAll());
		
    }
	
	
	
	
    @FXML
    void izm_act2(ActionEvent event) {
  
		jb = new JdbcTemplate(dataSource); 
		Zavka us =(Zavka)table.getSelectionModel().getSelectedItem();
		String sql = "update  zavka set Status=? where (Nomer=?) ";
		String sql2 = "update  zavka set Data_conc=? where (Nomer=?) "; 
		// Получаем новый статус
		String newStatus = cb1_status.getValue();

		// Проверяем, является ли новый статус "выполнено"
		if ("завершена".equals(newStatus.toLowerCase())) {
			jb.update(sql, newStatus , us.getNomer());
		    System.out.println("Задача выполнена!");
		    
		    LocalDate selectedDate = LocalDate.now();
			LocalTime currentTime = LocalTime.now();
			LocalDateTime dateTime = LocalDateTime.of(selectedDate, currentTime);
			String data = dateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
			System.out.println(data);
			jb.update(sql2, data, us.getNomer()); 
			
		    
		}else {
			jb.update(sql, cb1_status.getValue() , us.getNomer());
			
		}
		zav.clear(); 
		zav.addAll(zavkaDao.getAll());
		
    }

	public void setCurrentUser(String login2) {
		// TODO Auto-generated method stub
		jb = new JdbcTemplate(dataSource);
		var rez =  jb.query("Select ID from user where Login='"+login2+"'", (resultSet, rowNum) -> {return resultSet.getString("ID");});
		polzovatel = rez.get(0);

		String sql = "SELECT Ima, Famil FROM user WHERE Id = ?";
		Map<String, Object> userData = jb.queryForMap(sql, polzovatel);
		// Извлечение имени и фамилии из результата запроса
		String name = (String) userData.get("Ima");
		String surname = (String) userData.get("Famil");
		// Установка имени и фамилии на Label
		polzvtln.setText("Пользователь: "+name +" "+ surname);
	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		
		cb1_status.setItems(statusValues2);
		status_remont.setItems(statusValues);  
		
		
		
		dataSource = new MysqlDataSource();
		dataSource.setServerName("localhost");
		dataSource.setPort(3306);
		dataSource.setDatabaseName("dem");
		dataSource.setUser("root");
		dataSource.setPassword("");
		
		jb = new JdbcTemplate(dataSource);
		// -----
		zavkaDao = new ZavkaDao(dataSource);
		zav.addAll(zavkaDao.getAll());
		Nomer.setCellValueFactory(new PropertyValueFactory<Zavka, String>("Nomer"));
		Data_reg.setCellValueFactory(new PropertyValueFactory<Zavka, String>("data_nach"));
		Data_vip.setCellValueFactory(new PropertyValueFactory<Zavka, String>("data_conc"));
		Vid_texniki.setCellValueFactory(new PropertyValueFactory<Zavka, String>("Vid_texniki"));
		Model.setCellValueFactory(new PropertyValueFactory<Zavka, String>("Model"));
		Status.setCellValueFactory(new PropertyValueFactory<Zavka, String>("Status"));
		Opis.setCellValueFactory(new PropertyValueFactory<Zavka, String>("Opis"));
		Tip_remonta.setCellValueFactory(new PropertyValueFactory<Zavka, Integer>("tip_remonta"));
		Master.setCellValueFactory(new PropertyValueFactory<Zavka, Integer>("master_id"));
		Polzvtl.setCellValueFactory(new PropertyValueFactory<Zavka, Integer>("User_Id"));
		Kommit.setCellValueFactory(new PropertyValueFactory<Zavka, String>("Kommit"));
		table.setItems(zav);
		//---
		remontDao = new RemontDao(dataSource);
		zav2.addAll(remontDao.getAll());
		Status_remont.setCellValueFactory(new PropertyValueFactory<Remont, String>("Status_remont"));
		Nomer_zavki.setCellValueFactory(new PropertyValueFactory<Remont, String>("Nomer_zavki"));
		table2.setItems(zav2);
		// Создание объекта JdbcTemplate
		JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);

		// Выполнение запроса с помощью JdbcTemplate
		List<String> items = jdbcTemplate.query("SELECT Id, Ima FROM master", new RowMapper<String>() {
		    public String mapRow(ResultSet rs, int rowNum) throws SQLException {
		        return rs.getString("Id") + " - " + rs.getString("Ima");
		    }
		});
		
		//jb.update();
		
		// Создание ObservableList и установка элементов в ComboBox
		ObservableList<String> observableItems = FXCollections.observableArrayList(items);
		cb_master.setItems(observableItems);

		
		// Напишите SQL-запрос для подсчета количества заявок со статусом "завершена"
		String sql = "SELECT COUNT(*) FROM zavka WHERE Status = 'завершена'";
		// Используйте JdbcTemplate для выполнения запроса и получения результата
		int count = jdbcTemplate.queryForObject(sql, Integer.class);
		// Установите значение в Label
		kol_zav_zavok.setText("Количество завершённых заявок: "+String.valueOf(count));
		//-----
		 
		
		// Напишите SQL-запрос для подсчета количества заявок со статусом "завершена"
		String sql2 = "SELECT Count(*) FROM dem.zavka where Tip_remonta_ID = 1";
		// Используйте JdbcTemplate для выполнения запроса и получения результата
		int count2 = jdbcTemplate.queryForObject(sql2, Integer.class);
		// Установите значение в Label
		tip1.setText("Количество заявок на ремонт первого типа: "+String.valueOf(count2));
		
		// Напишите SQL-запрос для подсчета количества заявок со статусом "завершена"
		String sql3 = "SELECT Count(*) FROM dem.zavka where Tip_remonta_ID = 2";
		// Используйте JdbcTemplate для выполнения запроса и получения результата
		int count3 = jdbcTemplate.queryForObject(sql3, Integer.class);
		// Установите значение в Label
		tip2.setText("Количество заявок на ремонт второго типа: "+String.valueOf(count3));
		
		// Напишите SQL-запрос для подсчета количества заявок со статусом "завершена"
		String sql4 = "SELECT Count(*) FROM dem.zavka where Tip_remonta_ID = 3";
		// Используйте JdbcTemplate для выполнения запроса и получения результата
		int count4 = jdbcTemplate.queryForObject(sql4, Integer.class);
		// Установите значение в Label
		tip3.setText("Количество заявок на ремонт третьего типа: "+String.valueOf(count4));
		
		

		
		// Вывод результата в Label
		sr_vrema.setText("Не знаю");
		
		
		
	}
	
	
	
	
}
