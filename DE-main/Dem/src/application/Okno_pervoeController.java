package application;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;

import com.mysql.cj.jdbc.MysqlDataSource;
import com.mysql.cj.x.protobuf.MysqlxExpr.Identifier;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.ComboBox;

import javafx.scene.control.TextArea;

import javafx.scene.control.TableView;

import javafx.scene.control.DatePicker;

import javafx.scene.control.TableColumn;

public class Okno_pervoeController implements Initializable{
	@FXML
	private TableView<Zavka> table;
	@FXML
	private TableColumn<Zavka,String> Nomer;
	@FXML
	private TableColumn<Zavka,String> Data_reg;
	@FXML
	private TableColumn<Zavka,String> Data_vip;
	@FXML
	private TableColumn<Zavka,String> Vid_texniki;
	@FXML
	private TableColumn<Zavka,String> Model;
	@FXML
	private TableColumn<Zavka,String> Status;
	@FXML
	private TableColumn<Zavka,String>Opis;
	@FXML
	private TableColumn<Zavka,Integer> Tip_remonta;
	@FXML
	private TableColumn<Zavka,Integer> Master;
	@FXML
	private TableColumn<Zavka,Integer> Polzvtl;
	@FXML
	private TableColumn<Zavka,String> Kommit;
	@FXML
	private DatePicker datapick;
	@FXML
	private ComboBox<String> cb1_status;
	@FXML
	private TextField tx1;
	@FXML
	private TextField tx2;
	@FXML
	private TextArea tx3_area;
	@FXML
	private TextField tx4;
	@FXML
	private Label kol_zav_zavok;
	@FXML
	private Label lb_polzvtl;
	@FXML
	private ComboBox<String> cb_tip_remonta;
	@FXML
	private ComboBox<String> cb_master;
	@FXML
	private Button add;
	@FXML
	private Button vixod;
	@FXML
	private TextField tx_poisk;
	@FXML
	private Button sbros;
	
	String polzovatel;
	ZavkaDao zavkaDao;
	ObservableList<String> statusValues = FXCollections.observableArrayList("новая заявка");
	MysqlDataSource dataSource;
	JdbcTemplate jb;
	ObservableList<Zavka> zav = FXCollections.observableArrayList();
	
	
	// Event Listener on Button[#add].onAction
	@FXML
	public void act_add(ActionEvent event) {
		// TODO Autogenerated
		LocalDate selectedDate = datapick.getValue();
		LocalTime currentTime = LocalTime.now();
		LocalDateTime dateTime = LocalDateTime.of(selectedDate, currentTime);
		String data = dateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

		// Получение выбранного элемента из ComboBox
		String selected = cb_master.getValue();
		if (!selected.isEmpty()) {
		    // Извлечение только цифры из выбранного элемент
		    String onlyDigits = selected.replaceAll("\\D", "");
		    // Преобразование строки с цифрой в тип int
		    int number = Integer.parseInt(onlyDigits);
		    
		   // Получение выбранного элемента из ComboBox
		String selected2 = cb_tip_remonta.getValue();
		if (!selected2.isEmpty()) {
		    // Извлечение только цифры из выбранного элемент
		    String onlyDigits2 = selected2.replaceAll("\\D", "");
		    // Преобразование строки с цифрой в тип int
		    int number2 = Integer.parseInt(onlyDigits2);
		    Zavka us = new Zavka(tx1.getText(), data, "", tx2.getText(), tx4.getText(), cb1_status.getValue(),
		        tx3_area.getText(), number2, number, Integer.parseInt(polzovatel), "");
			zavkaDao.save(us);
			zav.clear();
			zav.addAll(zavkaDao.getAll());
		    
		} else {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setContentText("Комбобокс не может быть пустой");
			alert.showAndWait();
		}} else {
			Alert alert = new Alert(AlertType.ERROR);
			alert.setContentText("Комбобокс не может быть пустой");
			alert.showAndWait();
		}
		
		tx1.clear();
		tx2.clear();
		tx3_area.clear();
		tx4.clear();
		datapick.setValue(null);
		
	}
	// Event Listener on Button[#vixod].onAction
	@FXML
	public void act_vixod(ActionEvent event) throws IOException {
		// TODO Autogenerated
		Pane root=null;
		root = (Pane)FXMLLoader.load(getClass().getResource("Vxod.fxml"));
		Stage stage = (Stage) vixod.getScene().getWindow();
		stage.setScene(new Scene(root,600,400));
	}
	
	// Event Listener on Button[#sbros].onAction
	@FXML
	public void act_sbros(ActionEvent event) {
		// TODO Autogenerated
		
		zav.clear();
		tx_poisk.clear();
		zav.addAll(zavkaDao.getAll());
		table.setItems(zav);
	}
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		cb1_status.setItems(statusValues);
		
		
		dataSource = new MysqlDataSource();
		dataSource.setServerName("localhost");
		dataSource.setPort(3306);
		dataSource.setDatabaseName("dem");
		dataSource.setUser("root");
		dataSource.setPassword("");
		jb = new JdbcTemplate(dataSource);
		

		zavkaDao = new ZavkaDao(dataSource);
		zav.addAll(zavkaDao.getAll());
		Nomer.setCellValueFactory(new PropertyValueFactory<Zavka, String>("Nomer"));
		Data_reg.setCellValueFactory(new PropertyValueFactory<Zavka, String>("data_nach"));
		Data_vip.setCellValueFactory(new PropertyValueFactory<Zavka, String>("data_conc"));
		Vid_texniki.setCellValueFactory(new PropertyValueFactory<Zavka, String>("Vid_texniki"));
		Model.setCellValueFactory(new PropertyValueFactory<Zavka, String>("Model"));
		Status.setCellValueFactory(new PropertyValueFactory<Zavka, String>("Status"));
		Opis.setCellValueFactory(new PropertyValueFactory<Zavka, String>("Opis"));
		Tip_remonta.setCellValueFactory(new PropertyValueFactory<Zavka, Integer>("tip_remonta"));
		Master.setCellValueFactory(new PropertyValueFactory<Zavka, Integer>("master_id"));
		Polzvtl.setCellValueFactory(new PropertyValueFactory<Zavka, Integer>("User_Id"));
		Kommit.setCellValueFactory(new PropertyValueFactory<Zavka, String>("Kommit"));
		table.setItems(zav);
		
		
		// Создание объекта JdbcTemplate
		JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);

		// Выполнение запроса с помощью JdbcTemplate
		List<String> items = jdbcTemplate.query("SELECT Id, Ima FROM master", new RowMapper<String>() {
		    public String mapRow(ResultSet rs, int rowNum) throws SQLException {
		        return rs.getString("Id") + " - " + rs.getString("Ima");
		    }
		});
		
		
		// Создание ObservableList и установка элементов в ComboBox
		ObservableList<String> observableItems = FXCollections.observableArrayList(items);
		cb_master.setItems(observableItems);


		// Создание объекта JdbcTemplate
		JdbcTemplate jdbcTemplate2 = new JdbcTemplate(dataSource);

		// Выполнение запроса с помощью JdbcTemplate
		List<String> items2 = jdbcTemplate2.query("SELECT ID,Vid_remonta FROM tip_remonta", new RowMapper<String>() {
		    public String mapRow(ResultSet rs, int rowNum) throws SQLException {
		        return rs.getString("ID") + " - " + rs.getString("Vid_remonta");
		    }
		});
		
		
		// Создание ObservableList и установка элементов в ComboBox
		ObservableList<String> observableItems2 = FXCollections.observableArrayList(items2);
		cb_tip_remonta.setItems(observableItems2);  
		// Напишите SQL-запрос для подсчета количества заявок со статусом "завершена"
		String sql = "SELECT COUNT(*) FROM zavka WHERE Status = 'завершена'";
		// Используйте JdbcTemplate для выполнения запроса и получения результата
		int count = jdbcTemplate.queryForObject(sql, Integer.class);
		// Установите значение в Label
		kol_zav_zavok.setText("Количество завершённых заявок: "+String.valueOf(count));

		tx_poisk.textProperty().addListener((observable, oldValue, newValue) -> {
		    search(newValue);
		});
		
	}
	
	
	private void search(String number) {
	    FilteredList<Zavka> filteredData = new FilteredList<>(table.getItems(), p -> true);
	    filteredData.setPredicate(remont -> {
	        if (number == null || number.isEmpty()) {
	            return true;
	        }
	        String lowerCaseFilter = number.toLowerCase();
	        if (remont.getNomer().toLowerCase().contains(lowerCaseFilter)) {
	            return true;
	        }
	        return false;
	    });
	    SortedList<Zavka> sortedData = new SortedList<>(filteredData);
	    sortedData.comparatorProperty().bind(table.comparatorProperty());
	    table.setItems(sortedData);
	}
	
	
	public void setCurrentUser(String login2) { // 
		// TODO Auto-generated method stub
		jb = new JdbcTemplate(dataSource);
		var rez =  jb.query("Select ID from user where Login='"+login2+"'", (resultSet, rowNum) -> {return resultSet.getString("ID");});
		polzovatel = rez.get(0);

		String sql = "SELECT Ima, Famil FROM user WHERE Id = ?";
		Map<String, Object> userData = jb.queryForMap(sql, polzovatel);
		// Извлечение имени и фамилии из результата запроса
		String name = (String) userData.get("Ima");
		String surname = (String) userData.get("Famil");
		// Установка имени и фамилии на Label
		lb_polzvtl.setText("Пользователь: "+name +" "+ surname);
	}
	
}
